For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

a comprehensive development and improvement plan for your AI-Powered Resume Builder, including the dark/light theme implementation.

The Plan:
Phase 1: Core Feature Completion (MVP)
This phase focuses on completing the essential features outlined in the PRD to make the application fully functional.

Implement Resume Service:

Define Resume Schema: Create the Mongoose schema for the Resume model in backend/services/resume-service/src/models/Resume.ts based on the Resume interface in backend/shared/types.ts.
Develop CRUD Endpoints: In backend/services/resume-service/src/routes/resume.ts, create API endpoints for creating, reading (single and all for a user), updating, and deleting resumes. These endpoints should be protected by JWT authentication.
Integrate with MongoDB: Connect the Resume Service to MongoDB using Mongoose, similar to how the User Service is connected.
Connect Frontend to Resume Service: Update the frontend-app/src/contexts/AuthContext.tsx or create a new context/service to interact with the new Resume Service endpoints for managing user resumes.
Implement PDF Service:

Set up Puppeteer: In backend/services/pdf-service, install Puppeteer and create a utility function to render HTML content into a PDF.
Create PDF Generation Endpoint: Develop an endpoint in backend/services/pdf-service/src/routes/pdf.ts that accepts resume JSON data, processes it into an HTML structure (potentially using a templating engine), and then uses Puppeteer to generate and return a PDF file.
Integrate with Frontend: Add functionality to the ResumeEditor page in frontend-app/src/pages/ResumeEditor.tsx to send resume data to this endpoint and trigger a PDF download.
Integrate AI for Bullet Points:

Create AI Endpoint in Resume Service: Add a new endpoint in backend/services/resume-service/src/routes/resume.ts (or a dedicated AI route) that accepts a job title, job description, and experience level.
Call OpenAI GPT-4 API: Within this endpoint, make a call to the OpenAI GPT-4 API to generate 3-5 relevant, action-oriented bullet points for a resume's work experience section.
Integrate into Resume Editor: In frontend-app/src/pages/ResumeEditor.tsx, add UI elements that allow users to input job details and receive AI-generated bullet points, which they can then add to their resume.
Develop Resume Editor UI:

Two-Panel Layout: Implement the two-panel layout in frontend-app/src/pages/ResumeEditor.tsx with a form on the left for data input and a real-time preview on the right.
Form Fields: Create input fields for all resume sections (personal info, experience, education, skills) and connect them to the resume data state.
Real-time Preview: Develop a component that takes the current resume data and renders it into a chosen template, updating instantly as the user types.
Phase 2: Enhancements & Polish
This phase focuses on improving the user experience, adding the requested theme, and optimizing performance.

Implement Dark/Light Theme:

Enable Dark Mode in Tailwind: In frontend-app/tailwind.config.js, enable the darkMode option by setting darkMode: 'class'.
Create Theme Context: In frontend-app/src/contexts/ThemeContext.tsx (new file), create a React Context to manage the current theme state ('light' or 'dark') and provide a function to toggle it. Persist the theme preference in localStorage.
Add Theme Toggle UI: Create a small component (e.g., a sun/moon icon button) in frontend-app/src/components/ThemeToggle.tsx (new file) and integrate it into the navigation or header of your application (e.g., frontend-app/src/App.tsx or frontend-app/src/pages/LandingPage.tsx).
Apply Tailwind Dark Classes: Throughout your frontend components (e.g., frontend-app/src/App.tsx, frontend-app/src/pages/LandingPage.tsx, frontend-app/src/components/AuthModal.tsx), use Tailwind's dark: prefix to define styles that apply when the dark mode is active (e.g., bg-gray-50 dark:bg-gray-900).
Enhance UI/UX and Responsiveness:

Refine Existing Components: Review all existing components for visual consistency, spacing, and typography.
Micro-interactions: Add subtle animations and transitions (e.g., hover effects, button clicks) to provide better user feedback.
Full Responsiveness: Ensure all pages and components are fully responsive and look great on various screen sizes (mobile, tablet, desktop).
Improve Error Handling and User Feedback:

Frontend Error Messages: Display user-friendly error messages for API failures (e.g., login, registration, resume saving).
Loading States: Implement clear loading indicators for asynchronous operations.
Form Validation Feedback: Provide immediate visual feedback for form validation errors.
Performance Optimizations:

Frontend: Implement code splitting and lazy loading for routes and large components to reduce initial load times.
Backend: Optimize database queries and API responses for efficiency.
Phase 3: Advanced Features & Scalability
This phase focuses on implementing premium features and ensuring the application's long-term viability.

Advanced AI Capabilities:

Job Description Analysis: Develop an AI endpoint that takes a full job description and suggests relevant skills, keywords, and tailored resume sections.
Resume Scoring/Feedback: Implement AI-driven analysis to score a user's resume against a job description and provide improvement suggestions.
Cover Letter Builder:

New Service/Module: Create a dedicated service or module for generating and managing cover letters.
AI-Powered Suggestions: Integrate AI to help users write compelling cover letters tailored to specific job applications.
LinkedIn Profile Integration:

OAuth 2.0 for LinkedIn: Implement LinkedIn OAuth to allow users to import their profile data directly into the resume builder.
Deployment and Monitoring:

CI/CD Pipelines: Set up continuous integration and continuous deployment pipelines for both frontend and backend services.
Monitoring and Logging: Implement logging and monitoring tools to track application health, performance, and errors in production.
Comprehensive Testing:

Unit Tests: Write unit tests for critical functions and components in both frontend and backend.
Integration Tests: Develop integration tests to ensure microservices communicate correctly.
End-to-End Tests: Implement end-to-end tests to simulate user flows and ensure the entire application works as expected.